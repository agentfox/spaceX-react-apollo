{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_utc","launch_success","react_default","a","createElement","className","launchStatus","dist_default","format","Link","to","concat","now","Date","moment","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","status","details","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","BrowserRouter","src","alt","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88511c5e.chunk.js","sourcesContent":["import React from 'react'\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function LaunchItem({\r\n    launch: { flight_number, mission_name, launch_date_utc, launch_success }\r\n  }) {\r\n  return (\r\n    <div className=\"card card-body mb-3 text-left \">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-9\">\r\n                <h4 className=\"ml-4\">Mission: <span className={launchStatus(launch_success,launch_date_utc)}>{mission_name}</span></h4>\r\n                <p className=\"ml-4\">Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_utc}</Moment></p>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <Link  to={`/launch/${flight_number}`} className=\"btn btn-secondary mt-3\" >Launch Detail</Link>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst launchStatus = (launch_success,launch_date_utc)=> {\r\n    if(launch_success){ return \"text-success\"} \r\n    else\r\n    {   \r\n        let now = new Date();\r\n        if(moment(launch_date_utc) > now) {\r\n            return \"text-warning\"\r\n        }\r\n        else{\r\n            return \"text-danger\"\r\n        }\r\n        \r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nexport default function MissionKey() {\r\n  return (\r\n    <div className=\"my-3 d-flex justify-content-center \">\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n      </p>\r\n      \r\n      <p>\r\n        <span className=\"px-3 mx-2 bg-danger\" /> = Fail \r\n      </p>\r\n      <p>\r\n        <span className=\"px-3 mx-2 bg-warning\" /> = Not Yet Launched \r\n      </p>\r\n    </div>\r\n  );\r\n}","import React, { Component,Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_utc\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\nexport default class Launches extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <MissionKey />\r\n        <Query  query={LAUNCHES_QUERY}>\r\n            {\r\n                ({loading,error,data})=> {\r\n                    if(loading){ return <h4>Loading...</h4> }\r\n                    if(error){ console.log(error);}\r\n                    \r\n                    \r\n                    return (\r\n                            <div className=\"w-75 mx-auto\">\r\n                            {\r\n                                data.launches.map(launch=> (\r\n                                    <LaunchItem launch={launch} key={launch.flight_number} />\r\n                                ))\r\n                            }</div>\r\n                        )\r\n                }\r\n            }\r\n        </Query>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { Component,Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport {Link} from 'react-router-dom'\r\nimport moment from 'moment';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number : Int!) {\r\n    launch(flight_number : $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_date_utc\r\n      launch_success\r\n      details\r\n      rocket {\r\n          rocket_id\r\n          rocket_name\r\n          rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default class Launch extends Component {\r\n  render() {\r\n      let {flight_number} = this.props.match.params;\r\n      flight_number = parseInt(flight_number);\r\n\r\n      \r\n    return (\r\n      <Fragment>\r\n        <Query  query={LAUNCH_QUERY} variables={{flight_number:flight_number}}>\r\n            {\r\n                ({loading,error,data}) => {\r\n                    if (loading){ return <h4>Loading...</h4> }\r\n                    if (error){ console.log(error);}\r\n                    \r\n                    return (\r\n                        <Fragment >\r\n                            <h3 className=\"card-title my-3 \">Mission Data</h3>\r\n                            <div className=\"card w-75 mx-auto my-3 text-left\" >\r\n                                <div className=\"card-body \">\r\n                                    <h5 className=\"card-title \">Mission Name: {data.launch.mission_name} \r\n                                        <i className={launchStatus(data.launch.launch_success,data.launch.launch_date_utc)}>\r\n                                        {   \r\n                                            status(data)\r\n                                        }</i> \r\n                                    </h5>\r\n\r\n                                    <p className=\"card-text ml-2\">{data.launch.details}</p>\r\n                                    \r\n                                    <h5 className=\"card-title \">Launch Details</h5>\r\n                                    <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">\r\n                                        Flight Number: {data.launch.flight_number}\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Launch Date: {data.launch.launch_date_utc}\r\n                                    </li>\r\n                                    \r\n                                    </ul>\r\n                                    <h4 className=\"my-3\">Rocket Details</h4>\r\n                                    <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Rocket ID: {data.launch.rocket.rocket_id}</li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Rocket Name: {data.launch.rocket.rocket_name}\r\n                                    </li>\r\n                                    <li className=\"list-group-item\">\r\n                                        Rocket Type: {data.launch.rocket.rocket_type}\r\n                                    </li>\r\n                                    </ul>\r\n                                    <hr />\r\n                                    <Link to=\"/\" className=\"btn btn-secondary\">\r\n                                    Back\r\n                                    </Link>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                        </Fragment>\r\n                    )\r\n                }\r\n            }\r\n        </Query>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nconst launchStatus = (launch_success,launch_date_utc)=> {\r\n    if(launch_success){ return \"text-success\"} \r\n    else\r\n    {   \r\n        let now = new Date();\r\n        if(moment(launch_date_utc) > now) {\r\n            return \"text-warning\"\r\n        }\r\n        else{\r\n            return \"text-danger\"\r\n        }\r\n        \r\n    }\r\n\r\n}\r\nconst status= (data)=> {\r\n                                             \r\n        if(launchStatus(data.launch.launch_success,data.launch.launch_date_utc)===\"text-success\"){ return \"<success>\"}\r\n        if(launchStatus(data.launch.launch_success,data.launch.launch_date_utc)===\"text-danger\") {return \"<failed>\"}\r\n        if(launchStatus(data.launch.launch_success,data.launch.launch_date_utc)===\"text-warning\") {return \"<upcoming>\"}\r\n        \r\n}","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"App\">\n              <img className=\"logo\" src=\"https://i.imgur.com/hzrRwO3.png\" alt=\"logo\"/>\n              <Route exact path=\"/\" component={Launches} />\n              <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}